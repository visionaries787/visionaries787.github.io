<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java-PoI</title>
    <url>/2020/09/20/javap%E5%AF%BC%E5%87%BAexcel-poi%E5%92%8CeasyExcel/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="POI简介"><a href="#POI简介" class="headerlink" title="POI简介"></a>POI简介</h4><p>​        Apache POI是Apache软件基金会的开放源码函式库，POI提供API给Java程序对Microsoft Office格式档案读和写的功能。</p>
<h4 id="POI结构"><a href="#POI结构" class="headerlink" title="POI结构"></a>POI结构</h4><blockquote>
<p>HSSF    - 提供读写Excel格式档案的功能</p>
<p>XSSF    - 提供读写Excel OOXML格式档案的功能</p>
<p>HWPF  - 提供读写Word格式档案的功能</p>
<p>HSLF    - 提供读写PowerPoint格式档案的功能</p>
<p>HDGF   - 提供读写Visio格式档案的功能</p>
</blockquote>
<p>注：HSSF是对应Excel 03版本，XSSF对应Excel 07版本，一般使用07版本的 </p>
<h5 id="XSSF"><a href="#XSSF" class="headerlink" title="XSSF"></a>XSSF</h5><table>
<thead>
<tr>
<th>类</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>HSSFWorkbook</td>
<td>工作簿对象</td>
</tr>
<tr>
<td>HSSFSheet</td>
<td>工作表对象</td>
</tr>
<tr>
<td>HSSFRow</td>
<td>行对象</td>
</tr>
<tr>
<td>HSSFCell</td>
<td>单元格对象</td>
</tr>
</tbody></table>
<p><strong>基本使用：</strong></p>
<ol>
<li><p>导入jar包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.poi&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-ooxml&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.9&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>基本写入操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Excel基本写操作</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excelWriteTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       String PATH = <span class="string">"F:\\OtherCode\\java_project\\demo\\src\\main\\java\\com\\fangw\\demo\\file\\"</span>;</span><br><span class="line">       <span class="comment">//创建一个工作簿</span></span><br><span class="line">       XSSFWorkbook xssfWorkbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">       <span class="comment">//创建一个工作表</span></span><br><span class="line">       XSSFSheet sheet = xssfWorkbook.createSheet();</span><br><span class="line">       <span class="comment">//创建行</span></span><br><span class="line">       XSSFRow row = sheet.createRow(<span class="number">0</span>);</span><br><span class="line">       <span class="comment">//创建单元格并设置值</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> cellNum = <span class="number">0</span>; cellNum &lt; <span class="number">5</span>; cellNum++) &#123;</span><br><span class="line">           row.createCell(cellNum).setCellValue(cellNum);</span><br><span class="line">       &#125;</span><br><span class="line">       FileOutputStream fileOutputStream = <span class="keyword">new</span> FileOutputStream(PATH + <span class="string">"导出Excel.xlsx"</span>);</span><br><span class="line">       xssfWorkbook.write(fileOutputStream);</span><br><span class="line">       fileOutputStream.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>基本读操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Excel基本读操作</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excelReadTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       String PATH = <span class="string">"F:\\OtherCode\\java_project\\demo\\src\\main\\java\\com\\fangw\\demo\\file\\"</span>;</span><br><span class="line">       <span class="comment">//获取文件流</span></span><br><span class="line">       FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(PATH + <span class="string">"读Excel.xlsx"</span>);</span><br><span class="line">       <span class="comment">//创建工作簿</span></span><br><span class="line">       XSSFWorkbook workbook = <span class="keyword">new</span> XSSFWorkbook(fileInputStream);</span><br><span class="line">       <span class="comment">//获取第一个sheet</span></span><br><span class="line">       Sheet sheet = workbook.getSheetAt(<span class="number">0</span>);</span><br><span class="line">       <span class="comment">//获取行</span></span><br><span class="line">       Row row = sheet.getRow(<span class="number">0</span>);</span><br><span class="line">       <span class="comment">//获取行中值</span></span><br><span class="line">       ArrayList&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">           Cell cell = row.getCell(i);</span><br><span class="line">           <span class="keyword">double</span> value = cell.getNumericCellValue();</span><br><span class="line">           System.out.println(value);</span><br><span class="line">       &#125;</span><br><span class="line">       fileInputStream.close();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p><strong>EXCEL常用操作方法</strong></p>
<ol>
<li><p>Excel常用对象方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>HSSFWorkbook wb = new HSSFWorkbook();</td>
<td>创建工作簿对象</td>
</tr>
<tr>
<td>HSSFSheet sheet = wb.creatSheet(“sheet1”);</td>
<td>创建工作表对象</td>
</tr>
<tr>
<td>HSSFRow row = sheet.createRow(0);</td>
<td>创建工作表的行对象</td>
</tr>
<tr>
<td>HSSFCell cell = row.createCell(0).setCellValue(666)</td>
<td>创建单元格对象并设置值</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>HSSFSheet sheet = wb.getSheet(0);</td>
<td>得到工作表对象</td>
</tr>
<tr>
<td>HSSFRow row = sheet.getRow(0);</td>
<td>得到工作表行对象</td>
</tr>
<tr>
<td>HSSFCell cell = row.getCell(0);</td>
<td>得到工作表单元格对象</td>
</tr>
</tbody></table>
</li>
<li><p>sheet常用方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>wb.setSheetName(1,”sheet1,HSSFCell.ENCODING_UTF_16)</td>
<td>设置指定工作表名称和编码</td>
</tr>
<tr>
<td>wb.getNumberOfSheets()</td>
<td>取得sheet的数目</td>
</tr>
<tr>
<td>HSSFSheet sheet = wb.getSheetAt(0)</td>
<td>根据index取得sheet对象</td>
</tr>
<tr>
<td>HSSFSheet sheet = wb.getSheet(“sheet名称”)</td>
<td>根据sheet名称取得sheet对象</td>
</tr>
<tr>
<td>int rowCount = sheet.getLastRowNum()</td>
<td>获取有效行数</td>
</tr>
<tr>
<td>sheet.setDefaultColumnWidth(17)</td>
<td>设置默认列宽</td>
</tr>
<tr>
<td>sheet.setDefaultRowHeight((short) (2 * 256))</td>
<td>设置默认行高，表示2个字符的高度</td>
</tr>
<tr>
<td>sheet.getNumMergedRegions()</td>
<td>得到所有区域</td>
</tr>
</tbody></table>
</li>
<li><p>row对象常用方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>row.getLastCellNum()</td>
<td>取得一行中有效单元格个数</td>
</tr>
<tr>
<td>row.setHeight(高度值)</td>
<td>设置行高</td>
</tr>
</tbody></table>
</li>
<li><p>cell对象常用方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>cell.setEncoding(1);</td>
<td>设置编码</td>
</tr>
<tr>
<td>cell.setCellValue(“单元格内容”);</td>
<td>设置单元格内容</td>
</tr>
<tr>
<td>cell.setCellType(HSSFCell.CELL_TYPE_STRING)</td>
<td>设置单元格类型为STRING</td>
</tr>
<tr>
<td>cell.getNumericCellValue()</td>
<td>读取数值类型单元格的值</td>
</tr>
<tr>
<td>cell.getStringCellvalue()</td>
<td>读取String类型单元格的值</td>
</tr>
</tbody></table>
</li>
<li><p>单元格合并</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//合并从第rowFrom行columnFrom列到rowFrom行columnTo列的区域</span></span><br><span class="line">Region region = <span class="keyword">new</span> Region((<span class="keyword">short</span>)rowFrom,(<span class="keyword">short</span>)columnFrom,(<span class="keyword">short</span>)rowTo,(<span class="keyword">short</span>)columnTo);</span><br><span class="line">sheet.addMergedRegion(region);</span><br><span class="line"><span class="comment">//合并4行2列</span></span><br><span class="line">sheet.addMergedRegion(<span class="keyword">new</span> CellRangeAddress(<span class="number">0</span>, <span class="number">4</span>, <span class="number">0</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取不同单元格属性的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getCellValue</span><span class="params">(Cell cell)</span> </span>&#123;</span><br><span class="line">        Object cellValue = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">switch</span> (cell.getCellType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> HSSFCell.CELL_TYPE_STRING:<span class="comment">//字符串类型</span></span><br><span class="line">                cellValue = cell.getStringCellValue();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isEmpty((String) ((String) cellValue).trim()))</span><br><span class="line">                    cellValue=<span class="string">" "</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> HSSFCell.CELL_TYPE_NUMERIC: <span class="comment">//数值类型</span></span><br><span class="line">                cellValue =cell.getNumericCellValue();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> HSSFCell.CELL_TYPE_FORMULA: <span class="comment">//公式</span></span><br><span class="line">                cell.setCellType(HSSFCell.CELL_TYPE_NUMERIC);</span><br><span class="line">                cellValue = String.valueOf(cell.getNumericCellValue());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> HSSFCell.CELL_TYPE_BLANK:</span><br><span class="line">                cellValue=<span class="string">" "</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> HSSFCell.CELL_TYPE_BOOLEAN:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> HSSFCell.CELL_TYPE_ERROR:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cellValue;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java高级特性-反射</title>
    <url>/2020/04/25/Java%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7-%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>定义：JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；这种动态获取信息及动态调用对象方法的功能称为java的反射机制。</p>
<p>java反射的实现主要借助一下四个类，也就是经过类加载器(ClassLoader)后形成的对象</p>
<table>
<thead>
<tr>
<th>类名</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td>Class类</td>
<td>类的实体，在运行的java应用程序中表示类和接口</td>
</tr>
<tr>
<td>Field类</td>
<td>类的成员变量</td>
</tr>
<tr>
<td>Method类</td>
<td>类的成员方法</td>
</tr>
<tr>
<td>Constructor类</td>
<td>类的构造方法</td>
</tr>
</tbody></table>
<p><strong>好处：</strong></p>
<blockquote>
<ul>
<li>可以在程序运行过程中，操作这写对象；只要给定类名，就可以通过反射机制来获取类的所有信息</li>
<li>可以解耦，提高程序的可扩展性</li>
</ul>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h4><p><strong>1.获取Class对象的方式</strong></p>
<blockquote>
<ul>
<li><p>Class.forName(“全类名”)：将字节码文件加载进内存，返回Class对象</p>
<p><em>–多用于配置文件，将类名定义在配置文件中。读取文件，加载类</em></p>
</li>
<li><p>类名.class：通过类名的属性class获取</p>
<p>–<em>多用于参数的传递</em></p>
</li>
<li><p>对象.getClass()：Object类中的方法</p>
<p><em>–多用于对象获取字节码的方式</em></p>
</li>
</ul>
</blockquote>
<p>注：同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，下列三种方式获取的Class对象都是同一个。</p>
<p><strong>2.Class对象方法</strong></p>
<table>
<thead>
<tr>
<th>获取类相关方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>asSubclass(Class<U> clazz)</td>
<td>把指定类的对象转换成代表其子类的对象</td>
</tr>
<tr>
<td>Cast</td>
<td>把对象转换成代表类或是接口的对象</td>
</tr>
<tr>
<td>getClassLoader()</td>
<td>获得类加载器</td>
</tr>
<tr>
<td>getClasses()</td>
<td>返回一个数组。数组中包含改类中所有公共类和接口类的对象</td>
</tr>
<tr>
<td>getDeclaredClasses()</td>
<td>返回一个数组，数组中包含该类中所有类和接口类的对象</td>
</tr>
<tr>
<td>forName(String className)</td>
<td>根据类名返回类的对象</td>
</tr>
<tr>
<td>getName()</td>
<td>获得类的完整路径名字</td>
</tr>
<tr>
<td>newInstance()</td>
<td>创建类的实例</td>
</tr>
<tr>
<td>getPackage()</td>
<td>获得类的包</td>
</tr>
<tr>
<td>getSimpleName()</td>
<td>获得类的名字</td>
</tr>
<tr>
<td>getSuperclass()</td>
<td>获得当前类继承的父类的名字</td>
</tr>
<tr>
<td>getInterfaces()</td>
<td>获得当前类实现的类或是接口</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>获取类中属性</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>getField(String name)</td>
<td>获得某个公有的属性对象</td>
</tr>
<tr>
<td>getFields()</td>
<td>获得所有公有的属性对象</td>
</tr>
<tr>
<td>getDeclaredField(String name)</td>
<td>获得某个属性对象</td>
</tr>
<tr>
<td>getDeclaredFields()</td>
<td>获得所有属性对象</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>获取类中构造方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>getConstructor(Class…&lt;?&gt; parameterTypes)</td>
<td>获得该类中与参数类型匹配的公有构造方法</td>
</tr>
<tr>
<td>getConstructors()</td>
<td>获得该类的所有公有构造方法</td>
</tr>
<tr>
<td>getDeclaredConstructor(Class…&lt;?&gt; parameterTypes)</td>
<td>获得该类中与参数类型匹配的构造方法</td>
</tr>
<tr>
<td>getDeclaredConstructors()</td>
<td>获得该类所有构造方法</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>获取类中成员方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>getMethod(String name, Class…&lt;?&gt; parameterTypes)</td>
<td>获得该类某个公有的方法</td>
</tr>
<tr>
<td>getMethods()</td>
<td>获得该类所有公有的方法</td>
</tr>
<tr>
<td>getDeclaredMethod(String name, Class…&lt;?&gt; parameterTypes)</td>
<td>获得该类某个方法</td>
</tr>
<tr>
<td>getDeclaredMethods()</td>
<td>获得该类所有方法</td>
</tr>
</tbody></table>
<h4 id="Field类"><a href="#Field类" class="headerlink" title="Field类"></a>Field类</h4><table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>equals(Object obj)</td>
<td>属性与obj相等则返回true</td>
</tr>
<tr>
<td>get(Object obj)</td>
<td>获得obj中对应的属性值</td>
</tr>
<tr>
<td>set(Object obj, Object value)</td>
<td>设置obj中对应属性值</td>
</tr>
</tbody></table>
<h4 id="Method类"><a href="#Method类" class="headerlink" title="Method类"></a>Method类</h4><table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>invoke(Object obj, Object… args)</td>
<td>传递object对象及参数调用该对象对应的方法</td>
</tr>
</tbody></table>
<h4 id="Constructor类"><a href="#Constructor类" class="headerlink" title="Constructor类"></a>Constructor类</h4><table>
<thead>
<tr>
<th>方法</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>newInstance(Object… initargs)</td>
<td>根据传递的参数创建类的对象</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/18/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HellowOrld</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main（String[] args）&#123;</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
</search>
